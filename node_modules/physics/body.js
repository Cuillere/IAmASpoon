var logger = require('logger');
var Force = require('physics/force');

var Body = function Body(id, x, y, width, height, mass) {
    //can either be platform, player, projectile
    this.group = 'platform';
    this.mass = mass;
    this.forces = [];
    this.addForce('weight', new Force(0, mass));
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.xSpeed = 0;
    this.ySpeed = 0;
    this.xAcceleration = 0;
    this.yAcceleration = 0;
    this.xFriction = 0;
    this.yFriction = 0;
    this.frictions = 0.05;
    this.isFixed = false;
    this.id = id;
};

Body.prototype = {
    onCollide: function(body, excessX, excessY, game) {
        if(!this.isFixed) {
            switch(this.group) {
                case 'player':
                    if(body.group == 'platform' || body.group == 'player') {
                        if(excessY > 0) {
                            this.addForce('reaction_bottom', new Force(0,-this.mass));
                            this.ySpeed = 0;
                            this.yAcceleration = 0;
                        } else {
                            if(this.getForce('reaction_bottom') != null) {
                                this.removeForce('reaction_bottom');
                            }
                        }
                        if(excessY < 0) {
                            this.addForce('reaction_top', new Force(0,-this.sumAllForces().y));
                            this.ySpeed = 0;
                            this.yAcceleration = 0;
                        } else {
                            if(this.getForce('reaction_top') != null) {
                                this.removeForce('reaction_top');
                            }
                        }
                        if(excessX > 0) {
                            this.addForce('reaction_right', new Force(-this.sumAllForces().x, 0));
                            this.xSpeed = 0;
                            this.xAcceleration = 0;
                        } else {
                            if(this.getForce('reaction_right') != null) {
                                this.removeForce('reaction_right');
                            }
                        }
                        if(excessX < 0) {
                            this.addForce('reaction_left', new Force(-this.sumAllForces().x, 0));
                            this.xSpeed = 0;
                            this.xAcceleration = 0;
                        } else {
                            if(this.getForce('reaction_left') != null) {
                                this.removeForce('reaction_left');
                            }
                        }
                        this.x -= excessX;
                        this.y -= excessY;
                    }
                    break;
                case 'projectile':
                    if(body.group == 'platform') {
                        game.removeProjectile(this.id);
                    } else if(body.group == 'player') {
                        var projectile = game.getProjectile(this.id);
                        if(projectile) {
                            var hittedPlayer =  game.getPlayer(body.id);
                            if(game.getPlayer(projectile.player_id).team != hittedPlayer.team) {
                                hittedPlayer.health -= 10;
                            }
                            game.removeProjectile(this.id);
                        }
                    }
                    break;
                case 'platform':
                    break;
            }
        }
    },

    setGroup: function(group) {
        if(group == 'player' || group == 'platform' || group == 'projectile') {
            this.group = group;
        } else {
            logger.log('Can\'t set'+ '\'' + group + '\'' + ' as group.' )
        }
    },

    tick: function(elapsedTime) {
        if(!this.isFixed) {
            var x = 0;
            var y = 0;
            this.forces.forEach(function(element, index, array){
                x += element.force.x;
                y += element.force.y;
            });
            this.xAcceleration = ((x * (elapsedTime/1000)) - this.xFriction);
            this.yAcceleration = ((y * (elapsedTime/1000)) - this.yFriction);
            this.xSpeed += this.xAcceleration;
            this.ySpeed += this.yAcceleration;
            this.xFriction = this.xSpeed*this.frictions;
            this.yFriction = this.ySpeed*this.frictions;
            this.x += this.xSpeed;
            this.y += this.ySpeed;
        }
    },

    addForce: function(name, force) {
        this.forces.push({name:name, force:force});
    },

    removeForce: function(name) {
        var indexToRemove = -1;
        this.forces.forEach(function(element, index, array) {
            if(element.name == name) {
                indexToRemove = index;
            }
        });
        if(indexToRemove >= 0) {
            this.forces.splice(indexToRemove, 1);
        }
    },

    getForce: function(name) {
        var force;
        this.forces.forEach(function(element, index, array) {
            if(element.name == name) {
                force = element.force;
            }
        });
        return force;
    },

    center: function() {
        return {x:this.x+this.width/2, y:this.y+this.height/2};
    },

    sumAllForces: function() {
        var sum = new Force(0,0);
        this.forces.forEach(function(element, index, array) {
            sum.add(element.force);
        });
        return sum;
    }
};

module.exports = Body;