var logger = require('logger');
var Force = require('physics/force');

var Body = function Body(x, y, width, height, mass) {
    //can either be platform, player, projectile
    this.group = 'platform';
    this.mass = mass;
    this.forces = [];
    this.forces.push({name:'weight', force:new Force(0, mass)});
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.xSpeed = 0;
    this.ySpeed = 0;
    this.xAcceleration = 0;
    this.yAcceleration = 0;
    this.xFriction = 0;
    this.yFriction = 0;
    this.isFixed = false;
};

Body.prototype = {
    onCollide: function(body, excessX, excessY) {
        if(!this.isFixed) {
            this.x -= excessX;
            this.y -= excessY;
        }
    },

    setGroup: function(group) {
        if(group == 'player' || group == 'platform' || group == 'projectile') {
            this.group = group;
        } else {
            logger.log('Can\'t set'+ '\'' + group + '\'' + ' as group.' )
        }
    },

    tick: function(elapsedTime) {
        if(!this.isFixed) {
            var x = 0;
            var y = 0;
            this.forces.forEach(function(element, index, array){
                x += element.force.x;
                y += element.force.y;
            });
            this.xAcceleration = ((x * (elapsedTime/1000)) - this.xFriction);
            this.yAcceleration = ((y * (elapsedTime/1000)) - this.yFriction);
            this.xSpeed += this.xAcceleration;
            this.ySpeed += this.yAcceleration;
            this.xFriction = this.xSpeed*0.05;
            this.yFriction = this.ySpeed*0.05;
            this.x += this.xSpeed;
            this.y += this.ySpeed;
        }
    },

    addForce: function(name, force) {
        this.forces.push({name:name, force:force});
    },

    removeForce: function(name) {
        var indexToRemove = -1;
        this.forces.forEach(function(element, index, array) {
            if(element.name == name) {
                indexToRemove = index;
            }
        });
        if(indexToRemove >= 0) {
            this.forces.splice(indexToRemove, 1);
        }
    },

    getForce: function(name) {
        this.forces.forEach(function(element, index, array) {
            if(element.name == name) {
                return element.force;
            }
        });
    },

    sumAllForces: function() {
        var sum = new Force(0,0);
        this.forces.forEach(function(element, index, array) {
            sum.add(element.force);
        });
        return sum;
    }
};

module.exports = Body;