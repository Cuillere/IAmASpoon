var PhysicSpace = require('physics/physicSpace');
var Force = require('physics/force');
var Body = require('physics/body');
var logger = require('logger');
var Player = require('game/player');


var physicSpace = new PhysicSpace();
var running = false;
var LOOP_TICK_TIME = 36;

exports.platforms = [];
exports.players = [];
exports.projectiles = [];

exports.start = function(loopCallback) {
	this.running = true;
    this.lastTime = Date.now();
	exports.loop(loopCallback);
};

exports.loop = function(loopCallback) {
	if(this.running) {
        exports.players.forEach(function(element, index, array) {
			element.tick(LOOP_TICK_TIME);
		});
        exports.projectiles.forEach(function(element, index, array) {
            element.body.tick(LOOP_TICK_TIME);
        });
		physicSpace.testCollisions();
        loopCallback(exports.players, exports.projectiles, LOOP_TICK_TIME);
	}

	setTimeout(function() {
		exports.loop(loopCallback);
	}, LOOP_TICK_TIME);
};

exports.pause = function() {
	this.running = false;
};

exports.unpause = function() {
	this.running = true;
};

exports.stop = function() {
	this.running = false;
};

exports.addPlatform = function(id, x, y, width, height) {
	var body = new Body(x, y, width, height, 0);
	body.setGroup('platform');
	physicSpace.addBody(id, body);
	body.isFixed = true;
	var platform = {id:id, body:body};
    exports.platforms.push(platform);
};

exports.addPlayer = function(id) {
	var body = new Body(130,130, 32, 32, 20);
	body.setGroup('player');
	physicSpace.addBody(id, body);
    var player = new Player(id, body);
    exports.players.push(player);
    return player;
};

exports.removePlayer = function(id) {
	physicSpace.removeBody(id);
	var indexToRemove = -1;
    exports.players.forEach(function(element, index, array) {
		if(element.id == id) {
			indexToRemove = index;
		}
	});
	if(indexToRemove >= 0) {
        exports.players.splice(indexToRemove, 1);
	}
};

exports.addProjectile = function(id, body) {
    exports.projectiles.push({id:id, body:body});
    physicSpace.addBody(id, body);
};

exports.removeProjectile = function(id) {
    physicSpace.removeBody(id);
    var indexToRemove = -1;
    exports.projectiles.forEach(function(element, index, array) {
        if(element.id == id) {
            indexToRemove = index;
        }
    });
    if(indexToRemove >= 0) {
        exports.projectiles.splice(indexToRemove, 1);
    }
};

exports.manageKeyboardInput = function(type, action, player) {
	if(action == 'up' || action == 'down' || action == 'right' || action == 'left') {
		var body = player.body;
		var force;
		var norme = 15;
		switch(action) {
			case 'up':
				force = new Force(0, -norme*3);
			break;
			case 'down':
				force = new Force(0, 0);
			break;
			case 'left':
				force = new Force(-norme*1.5, 0);
			break;
			case 'right':
				force = new Force(norme*1.5, 0);
			break;
		}
		if(type == 'down') {
			body.addForce(action, force);
		} else {
			body.removeForce(action);
		}
	}
};

exports.manageMouseInput = function (type, x, y, player) {
    if(type == 'down') {
          player.weapon.fire(this, player.body.center(), {x:x, y:y});
    }
};













