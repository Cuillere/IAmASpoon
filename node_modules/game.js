var physics = require('physics');
var logger = require('logger');

var players = [];
var physicSpace = new physics.PhysicSpace();
var running = false;

exports.platforms = [];

exports.start = function(loopCallback) {
	this.running = true;
	exports.loop(loopCallback);
};

exports.loop = function(loopCallback) {
	if(this.running) {
		players.forEach(function(element, index, array) { 
			element.body.tick(36);
		});
		physicSpace.testCollisions();
		loopCallback(players);
	}

	setTimeout(function() {
		exports.loop(loopCallback);
	}, 36);
};

exports.pause = function() {
	this.running = false;
};

exports.unpause = function() {
	this.running = true;
};

exports.stop = function() {
	this.running = false;
};

exports.addPlatform = function(id, x, y, width, height) {
	var body = new physics.Body(x, y, width, height, 0);
	body.setGroup('platform');
	physicSpace.addBody(id, body);
	body.isFixed = true;
	var platform = {id:id, body:body};
    exports.platforms.push(platform);
};

exports.addPlayer = function(id) {
	var body = new physics.Body(130,130, 32, 32, 20);
	body.setGroup('player');
	physicSpace.addBody(id, body);
	var player = {id:id, body:body};
    players.push(player);
    return player;
};

exports.removePlayer = function(id) {
	physicSpace.removeBody(id);
	var indexToRemove = -1;
	players.forEach(function(element, index, array) {
		if(element.id == id) {
			indexToRemove = index;
		}
	});
	if(indexToRemove >= 0) {
		players.splice(indexToRemove, 1);
	}
}

exports.manageInput = function(type, key, player) {
	if(key == 'up' || key == 'down' || key == 'right' || key == 'left') {		
		var body = player.body;
		var force;
		var norme = 15;
		switch(key) {
			case 'up':
				force = new physics.Force(0, -norme*3);
			break;
			case 'down':
				force = new physics.Force(0, 0);
			break;
			case 'left':
				force = new physics.Force(-norme*1.5, 0);
			break;
			case 'right':
				force = new physics.Force(norme*1.5, 0);
			break;
		}
		if(type == 'down') {
			body.addForce(key, force);
		} else {
			body.removeForce(key);
		}
	}
};













